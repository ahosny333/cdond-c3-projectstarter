version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string  
    steps:
      - run:
          name: Destroy created backend
          when: on_fail
          command: |
            # delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy created frontend
          when: on_fail
          command: |
            # delete created s3 bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #             cd backend
  #             npm install
  #             npm run build
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - backend/dist

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # Restore from cache
  #     - run:
  #         name: front-end test
  #         command: |
  #             cd frontend
  #             npm install
  #             npm run test
  #     - slack/notify:
  #         event: fail
  #         template: basic_fail_1
  #     - slack/notify:
  #         event: pass
  #         template: success_tagged_deploy_1
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # Restore from cache
  #     - run:
  #         name: Back-end test
  #         command: |
  #             cd backend
  #             npm install
  #             npm run test
            
  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: front-end analysize
  #         command: |
  #             cd frontend
  #             npm install
  #             npm audit fix --audit-level=critical --force

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: back-end analysize
  #         command: |
  #             cd backend
  #             npm install
  #             npm audit fix --audit-level=critical --force

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople 

  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople 
  #     # - run:
  #     #     name: write "[web]" in inventory.txt file 
  #     #     command: |
  #     #       echo "[web]" > ~/inventory.txt
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           cd .circleci/ansible
  #           aws ec2 describe-instances \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text >> inventory.txt
  #           cat inventory.txt
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .circleci/ansible/inventory.txt

  #     - destroy-environment:
  #         id : << pipeline.id >>
    

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints: ["f6:fa:ba:81:ab:a9:3f:ee:08:e6:de:3c:c6:e9:27:22"]
  #     # attach workspace
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible

  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt configure-server.yml
            
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         id : << pipeline.id >>      

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install aws dependencies
  #         command: |
  #           sudo apt-get update && sudo apt-get install -yy less
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             echo "DB migration was successful, will update memstash..."
  #             curl -H "Content-Type: text/plain" -H "token: 4a49bb2d-c573-43af-adb2-b5d89cda5a67" --request PUT --data "success" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #           else
  #             echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
  #             curl -H "Content-Type: text/plain" -H "token: 4a49bb2d-c573-43af-adb2-b5d89cda5a67" --request PUT --data "fail" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #           fi
  #           echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
  #     # Here's where you will add some code to rollback on failure      
  #     - destroy-environment:
  #         id : << pipeline.id >> 

  # deploy-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install aws dependencies
  #         command: |
  #           sudo apt-get update && sudo apt-get install -yy less
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         id : << pipeline.id >>      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f6:fa:ba:81:ab:a9:3f:ee:08:e6:de:3c:c6:e9:27:22"]
      # attach workspace
      # - attach_workspace:
      #     at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            pip3 install awscli
      - run:
          name: build backend
          command: |
            cd backend
            npm run build
      - run:
          name: compress backend
          command: |
            cd ~/project
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: use ansible to copy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id : << pipeline.id >>     

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      ############################
      - deploy-backend:
          # requires: [run-migrations]
      ###############
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]